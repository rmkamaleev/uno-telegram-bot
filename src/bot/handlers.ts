import { Context } from 'telegraf';
import { UnoGame } from '../uno-lite/game.js';

export const game = new UnoGame(); // Singleton –¥–ª—è –±–æ—Ç–∞

// --- /start ---
export const startHandler = (ctx: Context) => {
  const userId = ctx.from?.id;
  const name = ctx.from?.first_name || 'Player';
  if (!userId) return;

  if (!game.addPlayer({ id: userId, name, hand: [] })) {
    return ctx.reply('–¢—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.');
  }

  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${name}!`);

  if (game.getPlayers().length === 2) {
    game.startGame();
    game.getPlayers().forEach(p => {
      ctx.telegram.sendMessage(p.id, `–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${p.hand.join(', ')}`);
    });
    const current = game.getCurrentPlayer();
    ctx.telegram.sendMessage(current.id, `–¢–≤–æ–π —Ö–æ–¥. –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞: ${game.getTopCard()}`);
  } else {
    ctx.reply('–ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...');
  }
};

// --- /hand ---
export const handHandler = (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  const hand = game.getPlayerHand(userId);
  ctx.reply(`–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${hand.join(', ')}`);
};

// --- /draw ---
export const drawHandler = (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  if (game.getCurrentPlayer().id !== userId) return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!');
  const card = game.drawCardForPlayer(userId);
  if (!card) return ctx.reply('–ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –¥–æ–±–æ—Ä–∞.');
  ctx.reply(`–¢—ã –±–µ—Ä—ë—à—å –∫–∞—Ä—Ç—É: ${card}`);
};

// --- /play <–∫–∞—Ä—Ç–∞> ---
export const playHandler = (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId || !ctx.message || !('text' in ctx.message)) return;

  const text = ctx.message.text.trim();
  const card = text.split(' ')[1]?.toUpperCase();
  if (!card) return ctx.reply('–£–∫–∞–∂–∏ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play RED-5');

  if (game.getCurrentPlayer().id !== userId) return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π —Ö–æ–¥!');

  const success = game.playCard(userId, card);
  if (!success) return ctx.reply('–ù–µ–ª—å–∑—è —Å—ã–≥—Ä–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É.');

  ctx.reply(`–¢—ã —Å—ã–≥—Ä–∞–ª ${card}.`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
  const player = game.getPlayers().find(p => p.id === userId)!;
  if (player.hand.length === 0) {
    ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!');
    const opponent = game.getPlayers().find(p => p.id !== userId);
    if (opponent) ctx.telegram.sendMessage(opponent.id, '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.');
    return;
  }

  // –°–æ–æ–±—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
  const next = game.getCurrentPlayer();
  ctx.telegram.sendMessage(next.id, `–¢–≤–æ–π —Ö–æ–¥. –í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞: ${game.getTopCard()}`);
  ctx.telegram.sendMessage(next.id, `–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: ${next.hand.join(', ')}`);
};

// --- /state ---
export const stateHandler = (ctx: Context) => {
  const top = game.getTopCard();
  const color = game.getCurrentColor();
  const turnPlayer = game.getCurrentPlayer();
  const playersState = game.getPlayers()
    .map(p => `${p.name}: ${p.hand.length} –∫–∞—Ä—Ç`)
    .join('\n');
  ctx.reply(`–í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞: ${top} (–¶–≤–µ—Ç: ${color})\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${turnPlayer.name}\n${playersState}`);
};

// --- /help ---
export const helpHandler = (ctx: Context) => {
  const helpMessage = `
üéÆ *UNO Lite - –ö–æ–º–∞–Ω–¥—ã*

*–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –≤–∞—à–µ–≥–æ —Ö–æ–¥–∞):*
/play <–ö–ê–†–¢–ê> ‚Äî —Å—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /play RED-5
/draw ‚Äî –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã, –µ—Å–ª–∏ –Ω–µ—á–µ–º –ø–æ—Ö–æ–¥–∏—Ç—å
/hand ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã

*–ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/state ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É, —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç, —á–µ–π —Ö–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–æ–≤

*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π:*
/start ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
`;
  ctx.replyWithMarkdownV2(helpMessage);
};

// --- /reset ---
export const resetHandler = (ctx: Context) => {
  game.resetGame();
  ctx.reply('–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /start');
};
